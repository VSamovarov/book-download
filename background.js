chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action !== "downloadPlaylist" || !Array.isArray(message.playList)) {
    return;
  }

  const MAX_CONCURRENT_DOWNLOADS = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  let activeDownloads = 0;
  const queue = [...message.playList];

  const processNext = () => {
    if (queue.length === 0 && activeDownloads === 0) {
      console.log("‚úÖ –í—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.");
      sendResponse({ status: "ok" });
      return;
    }

    while (activeDownloads < MAX_CONCURRENT_DOWNLOADS && queue.length > 0) {
      const track = queue.shift();
      if (!track.url || !track.title) {
        console.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫:", track);
        continue;
      }

      activeDownloads++;
      const fileName = sanitizeFileName(`${track.title}.mp3`);

      chrome.downloads.download(
        {
          url: track.url,
          filename: `AudioBooks/${fileName}`,
          conflictAction: "uniquify",
          saveAs: false
        },
        (downloadId) => {
          if (chrome.runtime.lastError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${fileName}:`, chrome.runtime.lastError);
          } else {
            console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: ${fileName} (ID: ${downloadId})`);
          }

          activeDownloads--;
          processNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
        }
      );
    }
  };

  processNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É –∑–∞–≥—Ä—É–∑–æ–∫
});

function sanitizeFileName(name) {
  return name.replace(/[<>:"/\\|?*]+/g, "_").trim();
}
