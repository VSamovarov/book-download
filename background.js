// –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∏–∫–∞—Ö
chrome.webNavigation.onHistoryStateUpdated.addListener((details) => {
  chrome.tabs.sendMessage(details.tabId, { action: 'historyChanged' }, (response) => {
    if (chrome.runtime.lastError) {
      console.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", chrome.runtime.lastError.message)
    } else {
      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç content.js:", response)
    }
  })
})

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {

  const { action, playlist, title } = message

  if (action !== "downloadPlaylist" || !Array.isArray(playlist)) {
    return
  }

  const MAX_CONCURRENT_DOWNLOADS = 3
  let activeDownloads = 0
  let responseSent = false // ‚úÖ –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ sendResponse


  const bookName = sanitizeFileName(title)
  const queue = [...playlist]

  const processNext = () => {
    if (queue.length === 0 && activeDownloads === 0) {
      console.log('‚úÖ –í—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.')
      if (!responseSent) {
        sendResponse({ status: 'ok' })
        responseSent = true;
      }
      return;
    }

    while (activeDownloads < MAX_CONCURRENT_DOWNLOADS && queue.length > 0) {
      const track = queue.shift()
      if (!track.url || !track.title) {
        console.warn('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫:', track)
        continue;
      }

      activeDownloads++;
      const fileName = (track.index.toString()).padStart(4, '0') + '.mp3'

      chrome.downloads.download(
        {
          url: track.url,
          filename: `AudioBooks/${bookName}/${fileName}`,
          conflictAction: 'uniquify',
          saveAs: false
        },
        (downloadId) => {
          if (chrome.runtime.lastError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${fileName}:`, chrome.runtime.lastError)
          } else {
            console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: ${fileName} (ID: ${downloadId})`)
          }
          activeDownloads--
          processNext()
        }
      )
    }
  }

  processNext()
  return true
})

function sanitizeFileName(name) {
  return name.replace(/[<>:"/\\|?*]+/g, "_").trim()
}
